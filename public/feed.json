{
    "version": "https://jsonfeed.org/version/1",
    "title": "heum2.dev",
    "home_page_url": "https://heum2.dev",
    "feed_url": "https://heum2.dev/json",
    "description": "개발 및 일기를 끄적이는 블로그",
    "icon": "https://heum2.dev/images/base.jpg",
    "author": {
        "name": "heum2",
        "url": "https://heum2.dev"
    },
    "items": [
        {
            "id": "/2019/1-git-basic",
            "content_html": "\nGit을 사용해 본 경험은 로컬 저장소에 진행하고 있는 프로젝트를 저장시키고, `push` 라는 명령어를 사용해 GitHub에 올리는게 전부였다.\nFacebook 생활코딩 커뮤니티를 살펴보는 중 [**KISA 핀테크 기술지원센터**](https://onoffmix.com/event/203172) 에서 Git에 대한 세미나가 열린다는 글을 보았다.\n가격은 **무료** 였기에 이 기회에 Git에 대해 배우고자 참석했다.\n\n세미나 내용은 Git을 처음 만든 개발자, 배경, 구조, 흐름 순으로 진행되었다.\n\nGit을 처음 만든 사람은 Linux를 만든 [**리누스 토르발스**](https://ko.wikipedia.org/wiki/리누스_토르발스)라고 한다.\n\nGit이 처음 나온 배경은 버전을 만들 때마다, 버전의 이름들이 너무 지저분해지고, 또한 이전 버전의 자료들이 필요 할 경우 용량이 어마어마하게 커졌었다. 이러한 불편함을 해결하고자 Git이 나왔다고 한다.\n\n구조적으론 사용자가 실제 작업을 하는 **Working Directory**, 실제 작업을 가상의 공간에 담는 **Stage Area**, Git에 작업이 기록 되어있는 **Repository**로 되어있다.\n\nGit으로 버전관리를 하기 위해선 먼저 작업 공간을 알려줘야 한다. **Working Directory**에서 `git init`을 사용해 **.git** 디렉토리를 생성하면, Git은 '아 여기서 작업을 하는구나' 라고 인식하게 된다. 디렉토리 **.git**이 **Repository**이며, 기록을 위해 **Working Directory**의 작업들을 복사해 **Stage Area**에 넣어준 다음 **Stage Area** 작업들을 **Repository**에 기록하는 순서이다.\n\n세미나에서 **git bash**를 사용해 ComendLine으로 Git을 다루었다.\n\n---\n\n## Git 명령어\n\n```shell\ngit init # 작업 할 폴더에 .git 폴더 생성\ngit status # Git 상황 확인\ngit add <filename> # 가상환경에 담기\ngit commit -m <commit message> # Git에 기록하기\ngit log # 기록 확인\n```\n\nGit을 기록하기 위해서 가장 먼저 해야되는 것은 상태를 확인하는 것!! `git status`로 **Working Directory** 파일들의 생성, 수정, 삭제를 확인 할 수 있다.\n\n**.git**에 기록 시키기 전 **Stage Area**에 담아야하니 `git add <filename>`을 사용하면 가상의 공간에 담을 수 있다.  \n(파일 전부를 담으려면 `git add .`)  \n**Repository**에 기록하는 명령어는 `git commit -m <commit message>`을 사용해 가상의 공간에 담겨있는 작업들을 기록했다.  \n`-m`옵션을 사용하지 않았을 때는 다른 입력창이 나왔는데 편의성과 세미나 시간으로 인해 자세한 건 따로 검색해봐야 할 것 같았다.(참고로 `commit -m`을 할 때 GitHub 로그인을 시켜줬어야 했다.)\n\n이로써 Git으로 버전을 기록하는 것은 끝이 났다.\n\n이후 `git status`로 상태를 확인하면 기록 파일들이 없는 것을 볼 수 있었고, 기록된 정보들을 보기 위해 `git log`를 사용했다.\n`git log`에서 commit 옆에 숫자와 영어로 되어있는 **Commit ID**와 내가 입력한 **Commit Message** 그리고 **HEAD->master**를 볼 수 있었다.\n\n세미나에서 **Commit ID**가 어떻게 만들어지는지도 알려주었는데, 나의 이메일과 기록한 파일, **Commit Message** 그리고 **Parent**를 합쳐 해쉬화 하여 **Commit ID**를 만든다고 한다.\n\n---\n\n## 마치며\n\n내일은 `git reset` 명령어와 `git checkout` 그리고, **HEAD**와 **mater**에 대해서 알려준다고 한다.\n살짝 맛보기로 Git은 불변하기에 파일들을 삭제하지도 변경하지도 않는다는 말로 호기심을 자극했다..\n\nGit이 내부적으로 어떻게 돌아가는지 처음 알게 된 세미나였다. 앞으로도 Git을 써야하는 입장으로 굉장히 도움이 되었고, 같이 개발을 공부하는 사람들에게 Git을 전파해주고 싶어졌다.\n",
            "url": "https://heum2.dev/2019/1-git-basic",
            "title": "Git의 기초",
            "summary": "Git을 한번 사용해보자.",
            "date_modified": "2019-12-11T00:00:00.000Z",
            "author": {
                "name": "heum2",
                "url": "https://heum2.dev"
            },
            "tags": [
                "Git"
            ]
        },
        {
            "id": "/2019/2-git-command",
            "content_html": "\n이번 세미나의 중심 내용은 `git reset`, `git checkout` 명령어와 **HEAD**, **master** 였다.\n\n## git log\n\n1일차에서 배운 `git log`는 기록 된 메시지들을 볼 수 있는 명령어였다.\n\n```shell\n$ git log\ncommit 1b5db033fac67ab86f6f166c3ad6e101411cd906 (HEAD -> master)\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:47 2019 +0900\n\n    working 5\n\ncommit 103e78de24c45cd227f489bc255c831e6cdb09e0\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:31 2019 +0900\n\n    working 4\n\n```\n\n`git log`를 실행시키게 되면 맨 처음 **HEAD**를 본다고 한다. **HEAD -> master** 이 형태를 볼 수 있는데, **HEAD**가 **master**를 가르키고 있구나 정도만 이해하면 될 것 같다.싣\n\ncommit ID는 commit 옆에 있는`1b5db033fac67ab86f6f166c3ad6e101411cd906` 부분으로 Author email, files, commit message, parent, Date 값 들을 **Hash**로 암호화(Encryption) 한 것이다.\n\n---\n\n## git reset\n\n`git reset`은 삭제와 복구를 할 수 있는 명령어라고 한다.\n해당 명령어 사용 방법은 `git reset <commit id>`로 현재 기록하고 있었던 파일들이 동작을 이상하게 하거나 삭제해야 할 경우, 이전 기록의 commit ID로 복구가 되고 이 후에 기록했던 파일들은 삭제가 된다.\n\n```shell\n$ git reset 103e78de24c45cd227f489bc255c831e6cdb09e0\nUnstaged changes after reset:\nM work.txt\nM work3.txt # 파일 내용들이 변경되었음을 확인할 수 있음\n\n$ git log\ncommit 103e78de24c45cd227f489bc255c831e6cdb09e0 (HEAD -> master)\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:31 2019 +0900\n\n    working 4\n\n```\n\n여기서 **master**가 **1b5db...** 에서 **103e7...**로 commit ID가 변경되었음을 알 수 있었다. 그런데 **1b5db...**은 진짜로 삭제되었을까??  \n다시 `git reset`을 사용해서 확인해보자.\n\n```shell\n$ git reset 1b5db033fac67ab86f6f166c3ad6e101411cd906\nUnstaged changes after reset:\nM work.txt\n```\n\nwork.txt가 변경되었음을 알려준다. `git log`를 찍어서 확인해보면\n\n```shell\n$ git log\ncommit 1b5db033fac67ab86f6f166c3ad6e101411cd906 (HEAD -> master)\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:47 2019 +0900\n\n    working 5\n\ncommit 103e78de24c45cd227f489bc255c831e6cdb09e0\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:31 2019 +0900\n\n    working 4\n\n```\n\n다시 복원이 되었다. 즉, **Git 불변성**을 확인 할 수 있었다.  \n만약 `git reset`으로 이전 버전으로 복구한 후 `git commit -m`을 했을 때 어떻게 되는지는 각자 해보면 좋을 것 같다.\n\n---\n\n## git checkout\n\n`git checkout`은 시간여행을 해주는 명령어라고 설명해주셨다. 명령어 사용법은 `git reset`과 동일하다.\n\n```shell\n$ git checkout 103e78d\nNote: switching to '103e78d'. # 103e78d라는 commend ID로 변경되었다는 것을 알 수 있다.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\ngit switch -c <new-branch-name>\n\nOr undo this operation with:\n\ngit switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 103e78d working 4 # commend ID로 인해 파일들이 변경되었음을 알려줌.\nM work.txt\n```\n\n`git log`를 찍어 기록 확인해보자.\n\n```shell\n\n\n$ git log\ncommit 103e78de24c45cd227f489bc255c831e6cdb09e0 (HEAD)\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:31 2019 +0900\n\n    working 4\n\n```\n\n`git checkout`을 했더니 **HEAD -> master**가 **HEAD**로 변경 되어있음을 볼 수 있다.  \n그렇다면 **master**는 어디에 있을까?  \n`git log`에 `--all` 옵션을 붙여서 찾아보자.\n\n```shell\n$ git log --all\ncommit 1b5db033fac67ab86f6f166c3ad6e101411cd906 (master)\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:47 2019 +0900\n\n    working 5\n\ncommit 103e78de24c45cd227f489bc255c831e6cdb09e0 (HEAD)\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:31 2019 +0900\n\n    working 4\n\n```\n\n**master**를 보면 최근에 기록한 곳의 commit ID를 가지고 있다고 한다.  \n여기에서 **master**는 최근 `git commit`한 commit ID를 가진다는 것, **HEAD**는 현재 작업하고 있는 위치를 알려준다는 것을 알 수 있었다.  \n현재 진행중인 작업을 최근에 작업한 곳으로 이동하고 싶다면 `git checkout master`를 사용하면 된다.  \n만약 `master`가 아닌 commend ID로 입력하게 되면 어떻게 되는지는 직접 해보면 좋을 것 같다.\n\n---\n\n## git branch\n\n마지막으로 **master**는 **branch**라고 불려진다. **분기**라는 뜻으로 게임에서 어느정도 캐릭터를 육성하다가 직업을 선택하는 순간이 온다. 그 순간을 **분기**라고 하는데, 프로젝트를 만들 때에도 **분기**가 찾아온다. `git branch`을 사용하면 프로젝트를 하나 더 복사하지 않아도 되는 장점이 생긴다. 명령어 사용 방법은 `git branch  <branch name>`이다.\n\n```shell\n$ git branch exp\n\n$ git log\ncommit 1b5db033fac67ab86f6f166c3ad6e101411cd906 (HEAD -> master, exp)\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:47 2019 +0900\n\n    working 5\n\ncommit 103e78de24c45cd227f489bc255c831e6cdb09e0\nAuthor: HeumHeum2 <jwh6295@gmail.com>\nDate: Wed Dec 11 15:23:31 2019 +0900\n\n    working 4\n\n```\n\nbranch로 master, exp가 있는 것을 볼 수 있다.\n\n---\n\n## 마치며\n\n내일은 **branch**가 여러 개 있고, 작업하고 있는 **branch**가 성공했을 경우 **branch**를 합치고 싶을 때 사용하는 명령어를 배운다고 한다.\n**HEAD**와 **master**가 무엇인지 알게되었고, Git은 변하지 않고 언제나 기록하고 있으니 두려움 없이 `git chechout` 과 `git reset`을 많이 써봐야겠다.\n벌써 Git이 친구 같다.\n",
            "url": "https://heum2.dev/2019/2-git-command",
            "title": "Git 명령어",
            "summary": "Git 명령어에 대해 자세히 알아보자.",
            "date_modified": "2019-12-12T00:00:00.000Z",
            "author": {
                "name": "heum2",
                "url": "https://heum2.dev"
            },
            "tags": [
                "Git"
            ]
        },
        {
            "id": "/2019/3-git-github",
            "content_html": "\n이번 세미나는 `git merge`, `git remote add`, `git push`, `git pull` 명령어와 **협업**이 중심 내용이였다.\n\n## git merge\n\n`git merge`는 작업하고 있는 **branch** 들을 합치고 싶을 때 사용하는 명령어다.\n\n먼저 **master**에는 m_work.txt 파일을 **exp**에는 e_work.txt 파일을 만들어 서로 다르게 해주었다.\n\n```shell:branch(master)\nwork.txt\nm_work.txt\n```\n\n```shell:branch(exp)\nwork.txt\ne_work.txt\n```\n\n```shell\n$ git log --oneline --all --graph\n\n- 63d2d07 (exp) working e2\n- 682767a working e1\n  | _ 3dd3a20 (HEAD -> master) working m2\n  | _ 5836424 working m1\n  |/\n- 5bd3f73 working 3\n- b023f81 working 2\n- 247a290 working 1\n```\n\n`--oneline` 옵션은 한 줄로 보겠다는 옵션이고, `-all`은 모든 branch 및 tag의 기록을, `--graph`는 그래프로 보여주는 옵션이다.\n\n`git log`를 보면 commit ID **5bd3f73** 이후로 서로 다른 길을 가고 있음을 보여준다. 이 둘을 한번 합쳐보겠다.\n\n```shell\n(master) # 현재 HEAD가 위치한 곳은 master이다.\n\n$ git merge exp\nMerge made by the 'recursive' strategy.\ne_work.txt | 2 ++\n1 file changed, 2 insertions(+)\ncreate mode 100644 e_work.txt\n\n$ git log --oneline --all --graph\n\n- 81b2063 (HEAD -> master) Merge branch 'exp'\n  |\\\n  | _ 63d2d07 (exp) working e2\n  | _ 682767a working e1\n- | 3dd3a20 working m2\n- | 5836424 working m1\n  |/\n- 5bd3f73 working 3\n- b023f81 working 2\n- 247a290 working 1\n```\n\n`git merge`를 사용하고 `create mode 100644 e_work.txt` 부분을 보면, e_work.txt가 **master**에 새로 생겼음을 알 수 있다. 이로써 다른 파일은 순조롭게 합쳐지는 것을 알 수 있었다.\n\n만약 같은 파일에서 **branch**들을 합치고 싶을 때는 어떻게 적용되는지 해보자.\n\n```shell\n(parent) (master) (exp)\n0           0       0\n0           0       0\n0           m1      0\n0           0       0\n0           0       e1\n0           0       0\n0           m1      0\n0           0       e1\n0           0       0\n0           m1      e1\n```\n\n우선 work.txt 파일을 만들고, **master**와 **exp**를 파일을 변경해 `git commit`해보았다.  \n합치기 전에 HEAD가 누구를 가르키고 있는지에 따라서 `git merge <branch name>`의 branch name을 신경써줘야한다.\n\n**master** 에서 **exp**를 합쳐보자.\n\n```shell\n$ git merge exp\nAuto-merging work.txt # 자동으로 합쳐준다.\nCONFLICT (content): Merge conflict in work.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n\n**conflict**이 났다고 알려준다. 왜 그런지 살펴보자.\n\n```shell\n(master|MERGING)\n0\n0\nm1\n0\ne1\n0\nm1\ne1\n0\n< < < < < < < HEAD\nm1\n=======\ne1\n> > > > > > > exp\n```\n\n다른 것들은 자동으로 합쳐줬지만 마지막 행은 **parent**와 비교했을 때 둘다 변경이 되었으니 개발자가 변경해달라고 요청하는 것이다.\n**branch**를 보면 **master|MERGING** 로 되어있어, 합성중인 상태라는 것을 알 수 있다.\n만약 합성을 취소하고 싶다면 `git merge --abort`명령어를 사용하면 합성 전으로 돌아갈 수 있다.\n충돌 내용을 변경 후, 합성을 다시 진행하고 싶다면 `git commit`을 하면 새로운 `commit ID`를 만들어 완성본을 보여준다.\n\n```shell\n(master|MERGING)\n$ git commit -am \"working merge\"\n[master dfdca9c] working merge\n\n(master)\n$ git log --oneline --all --graph\n\n- dfdca9c (HEAD -> master) working merge\n  |\\\n  | \\* 4708c05 (exp) working e1\n- | ecae6e2 working -m1\n  |/\n- aec874d working 1\n```\n\n`git log`를 찍어서 보면 제대로 합성되었음을 확인 할 수 있다.\n\n---\n\n## GitHub\n\n지금까지 내용들은 모두 local에서 이뤄진 것!\n혹여나 노트북이 말썽을 일으켜 포맷을 해야된다면 지금까지 작업했던 것이 다 날아가게 된다.\n그래서 우리는 [**GitHub**](https://github.com) 같은 remote storage(원격 저장소)를 이용해 백업을 해야한다.\n\n![image](https://raw.githubusercontent.com/heum2/image-archive/main/loginGitHub.png)\n\n아직, [**GitHub**](https://github.com)에 가입 하지 않았다면 회원가입을 하자.\n\n---\n\n![image](https://raw.githubusercontent.com/heum2/image-archive/main/setGitHub.png)\n\n**\\+** 를 누르게 되면 **New repository**가 보인다. 프로젝트를 올릴 때 자주 가게 될 녀석이다.\n\n---\n\n![image](https://raw.githubusercontent.com/heum2/image-archive/main/createGitHub.png)\n\n**Repository name**에 진행중인 프로젝트 이름을 적어주고, 프로젝트의 성향에 따라 Public, Private을 설정하면 될 것 같다. README는 주로 프로젝트 설명서이다. 마크다운 형식으로 작성 할 수 있다고 하는데 아직 작성해본 적은 없다.\n**Repository name**을 TestRepository라고 적고 생성해보았다.\n\n---\n\n![image](https://raw.githubusercontent.com/heum2/image-archive/main/testGitHub.png)\n\n이제 local storage에 remote storage 경로를 지정해주면 연결은 끝이 난다.\n\n---\n\n## git remote add\n\n`git remote add <remote name><HTTPS or SSH>` remote storage에 연결해주기 위한 명령어이다.\n`<remote name>`는 remote storage의 이름을 적는데, 대부분 origin을 많이 쓴다고 한다.\n\n![image](https://raw.githubusercontent.com/heum2/image-archive/main/HttpsOrSshGitHub.png)\n\n`<HTTPS or SSH>`는 적혀져 있으니 HTTPS로 할 것인지 SSH로 할 것인지 정해주면 된다.\n`git merge` 했던 프로젝트와 연결해보겠다.\n\n```shell\n$ git remote add origin git@github.com:HeumHeum2/TestRepository.git\n```\n\n연결이 되었는지 확인해보고자 프로젝트를 올려봐야 알 것 같다.\n\n---\n\n## git push\n\n`git push -u <remote name> <branch>` 명령어는 프로젝트를 **HEAD**가 가르키고 있는 **branch**와 같은 이름으로 된 remote storage의 **branch**에 업로드 해주는 역할을 한다.\n\n```shell\n$ git push -u origin master\nThe authenticity of host 'github.com (15.164.81.167)' can't be established.\nRSA key fingerprint is SHA256: ###\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com,15.164.81.167' (RSA) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n진행하다보면 이런 창이 나올 수도 있다. SSH Key가 나의 계정에 등록되지 않았기에 발생하는 Permission denied이다. 당황하지 말고, 내 계정의 **Settings**을 들어가보자.\n\n![image](https://raw.githubusercontent.com/heum2/image-archive/main/sshSetGitHub.png)\n\n들어가게 되면 이런 창이 나오는데, 혹시 SSH Key를 어디서 확인하는지 모르는 경우 [여기](https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)를 클릭해 진행하면 될 것이다.\n\n```shell\n$ git push -u origin master\nEnumerating objects: 12, done.\nCounting objects: 100% (12/12), done.\nDelta compression using up to 12 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (12/12), 853 bytes | 426.00 KiB/s, done.\nTotal 12 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), done.\nTo https://github.com/HeumHeum2/TestRepository.git\n\n- [new branch] master -> master\n  Branch 'master' set up to track remote branch 'master' from 'origin'.\n\n$ git log --oneline\ndfdca9c (HEAD -> master, origin/master) working merge\n4708c05 (exp) working e1\necae6e2 working -m1\naec874d working 1\n```\n\n![test](https://raw.githubusercontent.com/heum2/image-archive/main/pushGitHub.png)\n\nSSH KEY 등록이 끝나고 push를 하면 remote storage에 파일이 업로드 된 모습과, `git log`에서는 **origin/master**가 생긴 것을 볼 수 있다.\n\n---\n\n## git pull\n\n`git push`가 remote storage에 업로드 하는 명령어라면, `git pull`은 다운로드 하는 명령어이다.\n`git pull`도 처음에 remote storage를 연결 시켜줘야하며, 주로 협업 진행 중 일을 시작할 때 가장 많이 사용되는 명령어라고 한다.\n\n---\n\n## git clone\n\n`git clone <HTTPS OR SSH>` 는 `.git` 디렉토리가 없어도 remote storage에 업로드 되어있는 버전을 그대로 가져와 작업 할 수 있게 도와주는 명령어이다.\n\n---\n\n## 마치며\n\n3일동안의 Git 세미나가 끝이 났다...\nGit의 사용법을 몰라 두려워만 하고 있었는데 세미나를 통해 Git이 너무 편리한 녀석인 것을 알게 되었다.\n모르면 정말 불편하지만 알게되면 정말 편리한 Git.. ~~그저 갓~~\n다시 한번 복습하기 위해 처음으로 블로그에 글을 써봤다. 남들에게 알려준다는 생각으로 글을 쓰다보니 내가 어떤 것을 모르는지 깨닫게 된 계기와 지식을 공유 할때 내가 즐거워한다는 것을 깨달았다.\nReact를 현재 공부중인데, 지식을 공유한다고 생각하고 하나 씩 글을 써 나가야겠다.\n",
            "url": "https://heum2.dev/2019/3-git-github",
            "title": "Git으로 협업하기",
            "summary": "Git을 이용해 협업하는 방법을 알아보자.",
            "date_modified": "2019-12-13T00:00:00.000Z",
            "author": {
                "name": "heum2",
                "url": "https://heum2.dev"
            },
            "tags": [
                "Git"
            ]
        },
        {
            "id": "/es6/arrow-function",
            "content_html": "\n## Arrow Function\n\n함수를 화살표로 표현한 방식이다. 코드가 간결하다는 장점이 있다.\n바깥에 있던 `this` 값을 내부에서 그대로 사용하기에 함수 내의 `this`값을 변경시키지 않는다.\n예시를 살펴보자.\n\n```jsx\ndocument.addEventListener(\"click\", function (e) {\n  console.log(this); // event.currentTarget\n});\n```\n\n일반 함수의 `this`는 `event.currentTarget`을 가르킨다.\n\n```jsx\ndocument.addEventListener(\"click\", e => {\n  console.log(this); // window\n});\n```\n\n화살표 함수의 `this`는 부모의 `this`에 영향(lexical context)을 받아 `window`객체를 가르킨다.\n\n아래는 다른 예시이다.\n\n```jsx\nconst obj = {\n  names: [\"김\", \"이\", \"박\"],\n  fnc: function () {\n    console.log(this); // obj를 가르킨다.\n    obj.names.forEach(function () {\n      console.log(this); // window를 가르킨다.\n    });\n  },\n};\n```\n\n일반함수에서의 `this`이기에 `window`객체를 가르키는 것을 볼 수 있다. 그렇기에 `window`객체가 아닌 다른 객체를 사용하고 싶다면 `bind, aplly, call`을 사용하여 `window`가 아닌 다른 객체로 적용 시켜줘야한다.\n\n**Arrow function**으로 변경해보자.\n\n```jsx\nconst obj = {\n  names: [\"김\", \"이\", \"박\"],\n  fnc: function () {\n    console.log(this); // obj를 가르킨다.\n    obj.names.forEach(() => {\n      console.log(this); // obj를 가르킨다.\n    });\n  },\n};\n```\n\n상위에 `this`가 오브젝트이기에 **Arrow function** 안에 있는 `this`도 오브젝트를 가르키는 것을 볼 수 있다.\n\n그래서 `bind, call, apply`를 사용할 이유가 없다.\n\n## 참고\n\n[https://codingapple.com/unit/es6-3-arrow-function-why/?id=2447](https://codingapple.com/unit/es6-3-arrow-function-why/?id=2447)\n",
            "url": "https://heum2.dev/es6/arrow-function",
            "title": "Arrow Function에 대해 알아보자.",
            "summary": "ES6에서 사용되고 있는 Arrow Function대해 알아보자.",
            "date_modified": "2023-07-16T00:00:00.000Z",
            "author": {
                "name": "heum2",
                "url": "https://heum2.dev"
            },
            "tags": [
                "JavaScript",
                "ES6"
            ]
        },
        {
            "id": "/es6/this-keyword",
            "content_html": "\n## This\n\n`this`는 키워드 뜻이 매우 다양하다.\n함수에 쓰인 위치에 따라 다른 뜻을 가지는데 아래를 살펴보자.\n\n1. `this`는 일반적으로 `window` 객체(global object) 를 가르킨다.\n2. `use strict` 모드에서는 일반함수 내에서 `this`를 사용하면 `undefined`가 된다.\n3. 객체 내 함수안에서 사용하면 그 함수를 가지고 있는 객체를 뜻함.\n\n   ```jsx\n   const obj = {\n     data: \"data\",\n     fn: function () {\n       console.log(this);\n     },\n   };\n\n   obj.fn(); // obj 자체가 보임.\n   ```\n\n4. 객체를 만들어주는 함수를 생성자(constructor)라고 하며, 생성자 안에서 `this`는 새롭게 생성되는 객체(instance)가 된다.\n\n   ```jsx\n   function 기계() {\n     this.이름 = \"커피\";\n   }\n\n   const 오브젝트 = new 기계();\n   ```\n\n5. `addEventListener`의 콜백함수인 이벤트리스너 안에서의 `this`는 `event.currentTarget`을 가르킨다.\n\n   ```html\n   <button id=\"버튼\">버튼</button>\n\n   <script>\n     document\n       .getElementById(\"버튼\")\n       .addEventListener(\"click\", function (event) {\n         console.log(this); // event.currentTarget\n       });\n   </script>\n   ```\n\n## 참고\n\n[https://codingapple.com/unit/es6-1-this-keyword-object/?id=2447](https://codingapple.com/unit/es6-1-this-keyword-object/?id=2447)\n[https://codingapple.com/unit/es6-2-eventlistener-constructor-this/?id=2447](https://codingapple.com/unit/es6-2-eventlistener-constructor-this/?id=2447)\n",
            "url": "https://heum2.dev/es6/this-keyword",
            "title": "This는 무얼 가르킬까?",
            "summary": "this는 상황에 따라 값이 달라진다. 왜 그런지 알아보자.",
            "date_modified": "2023-07-15T00:00:00.000Z",
            "author": {
                "name": "heum2",
                "url": "https://heum2.dev"
            },
            "tags": [
                "JavaScript",
                "ES6"
            ]
        }
    ]
}